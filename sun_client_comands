#! env/bin/python 
import click
from parser import classes
from  configurations import config
import time
import os
import json
from data_entry import (
    get_postgre_clients,
    create_glonass_client,
    update_glonass_client,
    generate_glonass_client,
    create_fort_client,
    create_wialon_host_users,
    create_wialon_local_users,
)
from database.crud import (
   add_sys_mon_clients,
   add_one_sys_mon_client,
   update_one_sys_mon_client,
   delete_one_sys_mon_client,
)



@click.command()
@click.option(
        "-c", "--comand", "comand",
        default=None,
        type=str, help=""" 
        Какую команду использовать: \n
        get_postgres_clients_json - Показать json клиентов базы данных postgres\n 
        crud_client_db - Работа с клиентами в базе данных mysql из систем мониторинга \n
        create_client - создаёт клиента в системе мониторинга \n
        update_client - изменяет клиента в системе мониторинга \n
        """
        )
@click.option(
        "-m", "--monitor", "monitor", 
        default=None, 
        type=str, help="""
        Какой мониторинг использовать: \n
        glonass \n
        fort \n
        whost \n
        wlocal \n
        scout \n
        era \n
        """
        )
@click.option(
        "-v", "--value", "value", 
        default=None, 
        type=str, help=""" 
        Значения для crud_client_db: \n
       
        add_all_clients - Загрузить всех  клиентов в бд(таблицу clients_in_system_monitor) из системы мониторинга. \n 
        rec_add_one_client - Рекрусивно добавить клиентов в бд из системы мониторинга. \n 
        rec_del_one_client - Рекрусивно удалить клиентов из бд которого нет в системе мониторинга \n 
        rec_upd_one_client - Рекрусивно обновить клиентов в соответсвии данным из системы мониторинга \n

        Value для create_client: \n
        принимает json клиента \n 

        glonass: \n
        '{"parentId": "80eb1587-12cf-44d4-b0d0-c09b7ddf6110", "name": "", "fullName": "", "inn": "", "kpp": ""}' \n

        fort: \n
        '{"id": int, "name": str, "description": str}' \n 

        whost: \n
        '{"creatorId": "", "name": "", "password": ""}' \n

        wlocal: \n
        '{"creatorId": "", "name": "", "password": ""}' \n

        Value для update_client: \n
        принимает json клиента \n

        glonass: \n
        '{"agentId": "", "parentId": "", "name": name, "fullName": "",
---"inn": "",---"kpp": ""} \n

        """
        )

def main(comand, monitor, value):
    if comand == "get_postgres_clients_json":
        clients = get_postgre_clients()
        json_output = json.dumps(clients, indent=3, ensure_ascii=False)
        print(json_output)

    if comand == "create_client":
        if monitor == "glonass":
            glonass_client = create_glonass_client(json.loads(value))
            print(glonass_client)
        if monitor == "fort":
            fort_client = create_fort_client(json.loads(value))
            print(fort_client)
        if monitor == "whost":
            wialon_host_client = create_wialon_host_users(json.loads(value))
            print(wialon_host_client)
        if monitor == "wlocal":
            wialon_local_client = create_wialon_local_users(json.loads(value))
            print(wialon_local_client)


    if comand == "update_client":
        if monitor == "glonass":
            glonass_client = update_glonass_client(json.loads(value))
            print(glonass_client)


    if comand == "crud_client_db":
        if monitor == "glonass":
            if value == "add_all_clients":
                clients = generate_glonass_client()
                add_sys_mon_clients(clients)
            if value == "rec_add_one_client":
                clients = generate_glonass_client()
                add_one_sys_mon_client(clients)
            if value == "rec_del_one_client":
                clients = generate_glonass_client()
                delete_one_sys_mon_client(clients)
            if value == "rec_upd_one_client":
                clients = generate_glonass_client()
                update_one_sys_mon_client(clients)


if __name__ == "__main__":
    main()
